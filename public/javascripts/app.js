(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _ga = require('./ga');

var _utils = require('./utils');

var proto = {

    start: function start() {
        var _this = this;

        this.targetImage = this.view.getTargetImage();
        this.fitnessFunction = function (i) {
            return 1 / (1 + _utils.Utils.imageDifference(_this.targetImage, i));
        };
        this.setPopulation(_utils.Utils.fillArray(App.POPULATION_SIZE, function () {
            return _utils.Utils.fillArray(_this.targetImage.length, _utils.Utils.randInt.bind(null, 256));
        }));

        this.render();
        this.run();
    },

    run: function run() {
        this.step();
        requestAnimationFrame(this.run.bind(this));
    },

    step: function step() {
        this.update();
        this.render();
    },

    update: function update() {
        generations++;
        this.setPopulation(_ga.GA.nextGeneration(this.population));
    },

    render: function render() {
        if (generations % 10 === 0) {
            console.log(generations + ' geracoes, melhor fitness: ' + this.best.fitness);
            this.view.render(this);
        }
    },

    setPopulation: function setPopulation(population) {
        var _this2 = this;

        this.population = population;
        this.population.forEach(function (p) {
            return p.fitness = _this2.fitnessFunction(p);
        });
        this.best = _utils.Utils.maxBy(function (p) {
            return p.fitness;
        }, this.population);
    }
};

var generations = 0;

var App = {
    create: function create(view) {
        return Object.assign(Object.create(proto), { view: view });
    },

    POPULATION_SIZE: 200
};

exports.App = App;

},{"./ga":3,"./utils":5}],2:[function(require,module,exports){
'use strict';

exports.__esModule = true;
var proto = {

    init: function init() {
        this.domCanvas = document.createElement('canvas');
        this.domCanvas.width = this.width;
        this.domCanvas.height = this.height;
        this.ctx = this.domCanvas.getContext('2d');
    },

    setImage: function setImage(image) {
        this.ctx.drawImage(image, 0, 0);
    },

    addTo: function addTo(domContainer) {
        domContainer.appendChild(this.domCanvas);
    },

    getYuvImage: function getYuvImage() {
        var imageData = this.ctx.getImageData(0, 0, this.width, this.height).data,
            yuvData = [];

        for (var i = 0; i < imageData.length; i += 4) {
            yuvData.push(imageData[i]);
        }

        return yuvData;
    },

    setYuvImage: function setYuvImage(yuvImage) {
        var imageData = this.ctx.createImageData(this.width, this.height),
            data = imageData.data;

        yuvImage.forEach(function (c, i) {
            var dataIndex = i * 4;

            data[dataIndex] = c;
            data[dataIndex + 1] = c;
            data[dataIndex + 2] = c;
            data[dataIndex + 3] = 255; // alpha
        });

        this.ctx.putImageData(imageData, 0, 0);
    }
};

var Canvas = {
    create: function create(width, height) {
        var canvas = Object.create(proto);
        canvas.width = width;
        canvas.height = height;
        canvas.init();

        return canvas;
    }
};

exports.Canvas = Canvas;

},{}],3:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _utils = require('./utils');

var CONSERVE_RATIO = 0.1;

var GA = {

    nextGeneration: function nextGeneration(population) {
        var _this = this;

        var preserve = CONSERVE_RATIO * population.length,
            sortedByFitness = population.sort(function (p1, p2) {
            return p2.fitness - p1.fitness;
        }),
            toPreserve = sortedByFitness.slice(0, preserve + 1);

        population.totalFitness = population.reduce(function (sum, p) {
            return sum + p.fitness;
        }, 0);
        population.probabilities = population.map(function (p) {
            return p.fitness / population.totalFitness;
        });

        return _utils.Utils.fillArray(population.length - toPreserve.length, function () {
            var p1 = _this.selectParent(population),
                p2 = p1;
            while (p2 === p1) {
                p2 = _this.selectParent(population);
            }

            return _this.breed(p1, p2);
        }).concat(toPreserve);
    },

    selectParent: function selectParent(population) {
        var parentIndex = _utils.Utils.indexByProbabilities(population.probabilities);

        return population[parentIndex];
    },

    breed: function breed(parent1, parent2) {
        if (Math.random() < 0.75) {

            var child = [];
            // uniform crosssover:
            for (var i = 0; i < parent1.length; i++) {
                if (Math.random() < 0.5) {
                    child.push(parent1[i]);
                } else {
                    child.push(parent2[i]);
                }
            }

            return child;
        } else {
            return mutate(parent1);
        }
    },

    MUTATION_PROB: 0.005
};

function mutate(genome) {
    var mutated = [];

    for (var i = 0; i < genome.length; i++) {
        if (Math.random() < GA.MUTATION_PROB) {
            mutated.push(_utils.Utils.randInt(256));
        } else {
            mutated.push(genome[i]);
        }
    }

    return mutated;
}

exports.GA = GA;

},{"./utils":5}],4:[function(require,module,exports){
'use strict';

var _view = require('./view');

var _app = require('./app');

var populationContainer = document.getElementById('population'),
    targetContainer = document.getElementById('target'),
    view = _view.View.create(targetContainer, populationContainer);

view.load(function () {
      return _app.App.create(view).start();
});

},{"./app":1,"./view":6}],5:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var Utils = {

    randInt: function randInt(max) {
        return Math.floor(Math.random() * max);
    },

    fillArray: function fillArray(size, generator) {
        var array = [];

        for (var i = 0; i < size; i++) {
            array.push(generator(i));
        }

        return array;
    },

    maxBy: function maxBy(transform, items) {
        return items.map(function (i) {
            return { item: i, value: transform(i) };
        }).reduce(function (best, current) {
            return current.value > best.value ? current : best;
        }).item;
    },

    imageDifference: function imageDifference(image1, image2) {
        var score = 0;

        for (var i = 0; i < image1.length; i++) {
            score += Math.pow(image1[i] - image2[i], 2);
        }

        return score;
    },

    indexByProbabilities: function indexByProbabilities(probs) {
        var prob = Math.random();
        var accu = probs[0],
            i = 0;

        while (accu < prob) {
            accu += probs[++i];
        }

        return i;
    }
};

exports.Utils = Utils;

},{}],6:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _canvas = require('./canvas');

var _app = require('./app');

var image_path = 'images/smiley_small.jpg';
var NUMBER_OF_CANVASES = 8;

var proto = {

    load: function load(callback) {
        this.img = new Image();
        this.img.onload = this.loaded.bind(this);
        this.finishedLoadingCallback = callback;
        this.img.src = image_path;
    },

    render: function render(app) {
        this.populationCanvases.forEach(function (c, i) {
            return c.setYuvImage(app.population[i]);
        });
        this.currentBestCanvas.setYuvImage(app.best);
    },

    loaded: function loaded() {
        this.targetImageCanvas = _canvas.Canvas.create(this.img.width, this.img.height);
        this.targetImageCanvas.setImage(this.img);
        this.targetImageCanvas.addTo(this.targetContainer);

        this.currentBestCanvas = _canvas.Canvas.create(this.img.width, this.img.height);
        this.currentBestCanvas.addTo(this.targetContainer);

        this.populationCanvases = [];

        var table = document.createElement('table');
        var row = undefined,
            col = undefined;

        for (var i = 0; i < NUMBER_OF_CANVASES; i++) {
            if (i % 2 === 0) {
                row = document.createElement('tr');
                table.appendChild(row);
            }

            this.populationCanvases[i] = _canvas.Canvas.create(this.img.width, this.img.height);

            col = document.createElement('td');
            this.populationCanvases[i].addTo(col);
            row.appendChild(col);
        }

        this.populationContainer.appendChild(table);

        this.finishedLoadingCallback();
    },

    getTargetImage: function getTargetImage() {
        return this.targetImageCanvas.getYuvImage();
    }
};

var View = {
    create: function create(targetContainer, populationContainer) {
        var view = Object.assign(Object.create(proto), { targetContainer: targetContainer,
            populationContainer: populationContainer });
        return view;
    }
};

exports.View = View;

},{"./app":1,"./canvas":2}]},{},[1,2,3,4,5,6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
