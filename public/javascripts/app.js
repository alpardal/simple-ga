(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _canvas = require('./canvas');

var _ga = require('./ga');

var _utils = require('./utils');

var image_path = 'images/Yosemite_Falls_small.jpg';
var poolSize = 6;

var proto = {

    start: function start() {
        this.img = new Image();
        this.img.onload = this.imageLoaded.bind(this);
        this.img.src = image_path;
        this.pool = [];
    },

    imageLoaded: function imageLoaded() {
        this.targetImageCanvas = _canvas.Canvas.create(this.img.width, this.img.height);
        this.targetImageCanvas.setImage(this.img);
        this.targetImageCanvas.addTo(this.targetContainer);
        this.currentBestCanvas = _canvas.Canvas.create(this.img.width, this.img.height);
        this.currentBestCanvas.addTo(this.targetContainer);
        this.ga = _ga.GA.create(this.targetImageCanvas);
        this.fitnessFunction = _utils.Utils.imageDifference.bind(null, this.targetImageCanvas);

        var table = document.createElement('table');
        var row = undefined,
            col = undefined;

        for (var i = 0; i < poolSize; i++) {
            if (i % 2 === 0) {
                row = document.createElement('tr');
                table.appendChild(row);
            }

            this.pool[i] = _canvas.Canvas.createRandom(this.img.width, this.img.height);

            col = document.createElement('td');
            this.pool[i].addTo(col);
            row.appendChild(col);
        }

        this.poolContainer.appendChild(table);

        this.run();
    },

    run: function run() {
        this.step();
        // setTimeout(this.run.bind(this), 100);
    },

    step: function step() {
        this.calculatePoolFitness();
        this.setBest();
    },

    calculatePoolFitness: function calculatePoolFitness() {
        var _this = this;

        this.pool.forEach(function (genome) {
            genome.fitness = _this.fitnessFunction(genome);
        });
    },

    setBest: function setBest() {
        var best = _utils.Utils.minBy(function (g) {
            return g.fitness;
        }, this.pool);
        this.currentBestCanvas.setImageData(best.getImageData());
    }
};

var App = {
    create: function create(targetContainer, poolContainer) {
        return Object.assign(Object.create(proto), { targetContainer: targetContainer,
            poolContainer: poolContainer });
    }
};

exports.App = App;

},{"./canvas":2,"./ga":3,"./utils":5}],2:[function(require,module,exports){
'use strict';

exports.__esModule = true;
var proto = {

    init: function init() {
        this.domCanvas = document.createElement('canvas');
        this.domCanvas.width = this.width;
        this.domCanvas.height = this.height;
        this.ctx = this.domCanvas.getContext('2d');
    },

    setImage: function setImage(image) {
        this.ctx.drawImage(image, 0, 0);
    },

    addTo: function addTo(domContainer) {
        domContainer.appendChild(this.domCanvas);
    },

    getImageData: function getImageData() {
        return this.ctx.getImageData(0, 0, this.width, this.height);
    },

    createImageData: function createImageData() {
        return this.ctx.createImageData(this.width, this.height);
    },

    setImageData: function setImageData(imageData) {
        this.ctx.putImageData(imageData, 0, 0);
    }
};

var Canvas = {
    create: function create(width, height) {
        var canvas = Object.create(proto);
        canvas.width = width;
        canvas.height = height;
        canvas.init();

        return canvas;
    },

    createRandom: function createRandom(width, height) {
        var canvas = Canvas.create(width, height);

        var img = canvas.createImageData(),
            data = img.data;

        for (var i = 0; i + 3 < data.length; i += 4) {
            data[i] = Math.random() * 255; // r
            data[i + 1] = Math.random() * 255; // g
            data[i + 2] = Math.random() * 255; // b
            data[i + 3] = 255; // a
        }

        canvas.setImageData(img);

        return canvas;
    }
};

exports.Canvas = Canvas;

},{}],3:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var proto = {

    selectParents: function selectParents(pool) {
        return pool;
    },

    breed: function breed(parent1, parent2) {
        return parent1.getImageData();
    }
};

var GA = {
    create: function create(target) {
        return Object.create(proto);
    }
};

exports.GA = GA;

},{}],4:[function(require,module,exports){
'use strict';

var _app = require('./app');

var poolContainer = document.getElementById('gene-pool'),
    targetContainer = document.getElementById('target'),
    app = _app.App.create(targetContainer, poolContainer);
app.start();

},{"./app":1}],5:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var Utils = {

    sample: function sample(array) {
        var index = Math.random() * array.length | 0;
        return array[index];
    },

    minBy: function minBy(transform, items) {
        return items.map(function (i) {
            return { item: i, value: transform(i) };
        }).reduce(function (best, current) {
            return current.value < best.value ? current : best;
        }).item;
    },

    imageDifference: function imageDifference(image1, image2) {
        var data1 = image1.getImageData().data,
            data2 = image2.getImageData().data;
        var differences = 0;

        for (var i = 0; i < data1.length; i++) {
            if (data1[i] !== data2[i]) {
                differences += 1;
            }
        }

        return differences;
    }
};

exports.Utils = Utils;

},{}]},{},[1,2,3,4,5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
